type stats {
    id: ID!
    age: Int
    job: String
    marital: String
    education: String
    defaultStatus: String
    balance: Int
    housing: String
    loan: String
    contact: String
    day: Int
    month: String
    duration: Int
    campaign: Int
    pdays: Int
    previous: Int
    poutcome: String
    subscribed: String
}


# Query operations
type Query {
    getAllStatistics: [stats]
    getStatisticById(id: ID!): stats
}

input StatisticInput {
    age: Int!
    job: String!
    marital: String!
    education: String!
    defaultStatus: String!
    balance: Int!
    housing: String!
    loan: String!
    contact: String!
    day: Int!
    month: String!
    duration: Int!
    campaign: Int!
    pdays: Int!
    previous: Int!
    poutcome: String!
    subscribed: String!
}

type Mutation {
    createStatistic(input: StatisticInput!): stats
}
